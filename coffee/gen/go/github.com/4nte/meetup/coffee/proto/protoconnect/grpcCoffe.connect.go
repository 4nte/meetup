// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: grpcCoffe.proto

package protoconnect

import (
	context "context"
	errors "errors"
	proto "github.com/4nte/meetup/coffee/proto"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CoffeServiceName is the fully-qualified name of the CoffeService service.
	CoffeServiceName = "coffee.CoffeService"
)

// CoffeServiceClient is a client for the coffee.CoffeService service.
type CoffeServiceClient interface {
	MakeCoffe(context.Context, *connect_go.Request[proto.MakeCoffeRequest]) (*connect_go.Response[proto.MakeCoffeResponse], error)
}

// NewCoffeServiceClient constructs a client for the coffee.CoffeService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCoffeServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CoffeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &coffeServiceClient{
		makeCoffe: connect_go.NewClient[proto.MakeCoffeRequest, proto.MakeCoffeResponse](
			httpClient,
			baseURL+"/coffee.CoffeService/MakeCoffe",
			opts...,
		),
	}
}

// coffeServiceClient implements CoffeServiceClient.
type coffeServiceClient struct {
	makeCoffe *connect_go.Client[proto.MakeCoffeRequest, proto.MakeCoffeResponse]
}

// MakeCoffe calls coffee.CoffeService.MakeCoffe.
func (c *coffeServiceClient) MakeCoffe(ctx context.Context, req *connect_go.Request[proto.MakeCoffeRequest]) (*connect_go.Response[proto.MakeCoffeResponse], error) {
	return c.makeCoffe.CallUnary(ctx, req)
}

// CoffeServiceHandler is an implementation of the coffee.CoffeService service.
type CoffeServiceHandler interface {
	MakeCoffe(context.Context, *connect_go.Request[proto.MakeCoffeRequest]) (*connect_go.Response[proto.MakeCoffeResponse], error)
}

// NewCoffeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCoffeServiceHandler(svc CoffeServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/coffee.CoffeService/MakeCoffe", connect_go.NewUnaryHandler(
		"/coffee.CoffeService/MakeCoffe",
		svc.MakeCoffe,
		opts...,
	))
	return "/coffee.CoffeService/", mux
}

// UnimplementedCoffeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCoffeServiceHandler struct{}

func (UnimplementedCoffeServiceHandler) MakeCoffe(context.Context, *connect_go.Request[proto.MakeCoffeRequest]) (*connect_go.Response[proto.MakeCoffeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("coffee.CoffeService.MakeCoffe is not implemented"))
}
