package main

import (
	"context"
	"fmt"
	"net/http"

	diy "github.com/4nte/meetup/coffee/diy_serialization"
	coffe "github.com/4nte/meetup/coffee/proto"
	coffeconnect "github.com/4nte/meetup/coffee/proto/protoconnect"
	"github.com/bufbuild/connect-go"
)

func main() {
	//diyDemo()
	//protobufDemo()
	grpcDemo()
}

func diyDemo() {
	// Request for the coffe machine
	var makeCoffeRequest diy.MakeCoffeRequest

	// Collect user input
	{
		fmt.Println("What type of coffe do you want? (cappuccino, long_black, americano)")
		fmt.Scanf("%s", &makeCoffeRequest.CoffeType)

		fmt.Println("How much sugar do you want in grams?")
		fmt.Scanf("%d", &makeCoffeRequest.AmountOfSugarInGrams)
	}

	// Print struct to stdout
	fmt.Printf("%#v\n", makeCoffeRequest)

	// Serialize the MakeCoffeRequest
	serializedRequest := diy.SerializeMakeCoffeeRequest(makeCoffeRequest)

	SendMessageToCoffeeMachine(serializedRequest[:])
}

// func protobufDemo() {
// 	// Initialie struct (generated by protobuf)
// 	makeCoffeRequest := coffe.MakeCoffeRequest{
// 		Type:        coffe.CoffeeType_AMERICANO,
// 		SugarAmount: 100,
// 		Delay:       8,
// 	}

// 	fmt.Printf("%#v\n", makeCoffeRequest)

// 	// Marshal / Serialize (it's used synonymously)
// 	serializedRequest, err := protob.Marshal(&makeCoffeRequest)
// 	if err != nil {
// 		panic(err)
// 	}

// 	SendMessageToCoffeeMachine(serializedRequest)
// }

func grpcDemo() {
	client := coffeconnect.NewCoffeServiceClient(
		http.DefaultClient,
		"http://localhost:9090",
	)

	_, err := client.MakeCoffe(context.Background(),
		connect.NewRequest(&coffe.MakeCoffeRequest{
			CoffeRecipe: &coffe.MakeCoffeRequest_Cappuccino{
				Cappuccino: &coffe.Cappuccino{
					ShotsOfEspresso:               2,
					SteamedMilkMl:                 60,
					FoamedMilkMl:                  20,
					SprinklinkgOfChocolatePoweder: true,
				},
			},
			GramsOfSugar: 2,
		}),
	)
	if err != nil {
		fmt.Printf("Unable to make coffe: %s", err)
	}
}
